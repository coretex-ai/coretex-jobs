from typing import Optional
from pathlib import Path
from zipfile import ZipFile

import logging

from coretex import CustomDataset, CustomSample, Run, folder_manager
from coretex.bioinformatics import ctx_qiime2

from .utils import determineTruncLen
from .caching import getCacheNameThree


def dada2DenoiseSingleSample(
    sample: CustomSample,
    outputDir: Path,
    pairedEnd: bool,
    trimLeftF: int,
    truncLenF: int,
    trimLeftR: Optional[int],
    truncLenR: Optional[int]
) -> Path:

    samplePath = Path(sample.path)
    demuxPath = samplePath / "demux.qza"

    representativeSequencesPath = outputDir / "rep-seqs.qza"
    tablePath = outputDir / "table.qza"
    denoisingStatsPath = outputDir / "stats.qza"

    if pairedEnd:
        if trimLeftR is None or truncLenR is None:
            raise ValueError(f">> [Qiime: DADA2] Required arguments for paired-end denoising trimLeftR and truncLenR must not be None. trimLeftR: \"{trimLeftR}\", truncLenR \"{truncLenR}\"")

        logging.info(">> [Qiime: DADA2] Denoising paired-end sequences")
        ctx_qiime2.dada2DenoisePaired(
            str(demuxPath),
            trimLeftF,
            trimLeftR,
            truncLenF,
            truncLenR,
            str(representativeSequencesPath),
            str(tablePath),
            str(denoisingStatsPath)
        )
    else:
        logging.info(">> [Qiime: DADA2] Denoising single-end sequences")
        ctx_qiime2.dada2DenoiseSingle(
            str(demuxPath),
            trimLeftF,
            truncLenF,
            str(representativeSequencesPath),
            str(tablePath),
            str(denoisingStatsPath)
        )

    denoiseOutput = outputDir / "denoise-output.zip"

    with ZipFile(denoiseOutput, "w") as denoiseFile:
        denoiseFile.write(representativeSequencesPath, "rep-seqs.qza")
        denoiseFile.write(tablePath, "table.qza")
        denoiseFile.write(denoisingStatsPath, "stats.qza")

    return denoiseOutput


def metadataTabulateSample(sample: CustomSample, outputDir: Path) -> Path:
    denoisingStatsPath = Path(sample.path) / "stats.qza"
    visualizationPath = outputDir / "stats.qzv"

    ctx_qiime2.metadataTabulate(str(denoisingStatsPath), str(visualizationPath))
    return visualizationPath


def featureTableSummarizeSample(sample: CustomSample, metadataPath: Path, outputDir: Path) -> Path:
    tablePath = Path(sample.path) / "table.qza"
    visualizationPath = outputDir / "table.qzv"

    ctx_qiime2.featureTableSummarize(str(tablePath), str(visualizationPath), str(metadataPath))
    return visualizationPath


def featureTableTabulateSeqsSample(sample: CustomSample, outputDir: Path) -> Path:
    inputPath = Path(sample.path) / "rep-seqs.qza"
    visualizationPath = outputDir / "rep-seqs.qzv"

    ctx_qiime2.featureTableTabulateSeqs(str(inputPath), str(visualizationPath))
    return visualizationPath


def processSample(
    index: int,
    sample: CustomSample,
    metadataSample: CustomSample,
    summarySample: CustomSample,
    run: Run,
    outputDataset: CustomDataset,
    outputDir: Path,
    pairedEnd: Optional[bool]
) -> None:

    sampleOutputDir = outputDir / str(sample.id)
    sampleOutputDir.mkdir()

    if pairedEnd is None:
        pairedEnd = ctx_qiime2.isPairedEnd(sample)

    # First step:
    # Denoise the demultiplexed sample generated by the previous step in the pipeline
    trimLeftF = run.parameters["trimLeftF"]
    if trimLeftF is None:
        trimLeftF = 0

    trimLeftR = run.parameters["trimLeftR"]
    if trimLeftR is None:
        trimLeftR = 0

    # In case truncLen is not provided it will be determined automatically
    truncLenF = run.parameters["truncLenF"]
    if truncLenF is None:
        truncLenF = determineTruncLen(summarySample, forward = True)
        logging.info(f">> [Qiime: DADA2] Automatic truncLen for forward reads: {truncLenF}")

    truncLenR = run.parameters["truncLenR"]
    if truncLenR is None and pairedEnd:
        truncLenR = determineTruncLen(summarySample, forward = False)
        logging.info(f">> [Qiime: DADA2] Automatic truncLen for reverse reads: {truncLenR}")

    denoiseOutput = dada2DenoiseSingleSample(
        sample,
        sampleOutputDir,
        pairedEnd,
        trimLeftF,
        truncLenF,
        trimLeftR,
        truncLenR,
    )

    denoisedSample = ctx_qiime2.createSample(f"{index}-denoise", outputDataset.id, denoiseOutput, run, "Step 3: DADA2")

    # Second step:
    # Generate visualization artifacts for the denoised data
    logging.info(">> [Qiime: DADA2] Generating visualization")
    denoisedSample.download()
    denoisedSample.unzip()

    visualizationPath = metadataTabulateSample(denoisedSample, sampleOutputDir)
    ctx_qiime2.createSample(f"{index}-metadata-tabulate", outputDataset.id, visualizationPath, run, "Step 3: DADA2")

    # Third step:
    # Summarize how many sequences are associated with each sample and with each feature,
    # histograms of those distributions, and some related summary statistics
    logging.info(">> [Qiime: DADA2] Creating summarization")
    metadataPath = ctx_qiime2.getMetadata(metadataSample)
    featureTableSummaryPath = featureTableSummarizeSample(denoisedSample, metadataPath, sampleOutputDir)

    ctx_qiime2.createSample(f"{index}-feature-table-summarize", outputDataset.id, featureTableSummaryPath, run, "Step 3: DADA2")

    # Fourth step:
    # Provide a mapping of feature IDs to sequences,
    # and provide links to easily BLAST each sequence against the NCBI nt database
    logging.info(">> [Qiime: DADA2] Creating mapping file between feature IDs and sequences")
    featureTableMapPath = featureTableTabulateSeqsSample(denoisedSample, sampleOutputDir)
    ctx_qiime2.createSample(f"{index}-feature-table-tabulate-seqs", outputDataset.id, featureTableMapPath, run, "Step 3: DADA2")


def denoise(dataset: CustomDataset, run: Run, pairedEnd: Optional[bool]) -> CustomDataset:
    demuxSamples = ctx_qiime2.getDemuxSamples(dataset)
    if len(demuxSamples) == 0:
        raise ValueError(">> [Qiime: DADA2] Dataset has 0 demultiplexed samples")

    outputDir = folder_manager.createTempFolder("qiime_output")
    outputDataset = CustomDataset.createDataset(
        getCacheNameThree(run),
        run.spaceId
    )

    if outputDataset is None:
        raise ValueError(">> [Qiime: DADA2] Failed to create output dataset")

    for sample in demuxSamples:
        sample.unzip()

        index = ctx_qiime2.sampleNumber(sample)

        metadataSample = dataset.getSample(f"{index}-metadata")
        if metadataSample is None:
            raise ValueError(f">> [Qiime: DADA2] Imported sample not found")

        metadataSample.unzip()

        summarySample = dataset.getSample(f"{index}-summary")
        if summarySample is None:
            raise ValueError(f">> [Qiime: DADA2] Summary sample not found")

        summarySample.unzip()

        processSample(
            index,
            sample,
            metadataSample,
            summarySample,
            run,
            outputDataset,
            outputDir,
            pairedEnd
        )

    outputDataset.refresh()
    return outputDataset
